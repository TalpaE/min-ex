[build-system]
requires = ["scikit-build-core>=0.10", "pybind11"]
build-backend = "scikit_build_core.build"

[project]
name = "qcserenity"
version = "1.6.3a2"
authors = [
  { name="University of Muenster, Neugebauer Group", email="serenity@uni-muenster.de" }
]
description = "A quantum chemistry program focused on subsystems and embedding"
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Topic :: Scientific/Engineering :: Physics",
  "Intended Audience :: Science/Research",
  "Development Status :: 5 - Production/Stable"
]
dependencies = ["numpy"]

[project.optional-dependencies]
plotting = ["matplotlib"]
heatmap = ["ase", "scipy"]
visualization = ["py3Dmol", "ipywidgets"]

[project.urls]
Homepage = "https://github.com/qcserenity/serenity"
Issues = "https://github.com/qcserenity/serenity/issues"
Repository = "https://github.com/qcserenity/serenity"

[tool.scikit-build]
messages.after-success = "{green}Wheel successfully built! Hooray!"
messages.after-failure = """
{bold.red}Sorry{normal}, build failed. Your platform is {platform.platform}. Better luck next time!
"""
build.verbose = true
logging.level = "INFO"
build-dir = "serenity-wheel/build"
sdist.include = ["dev/templates/*"]
wheel.exclude = ["bin/**", "include/**", "lib/**", "lib64/*", "share/cmake/**", "share/libecpint/**", "share/libint/**"]
wheel.license-files = ["**/LICENSE", "**/CITATION", "**/COPYING", "**/LICENSE.md", "build/Makefile", "test"]

[tool.scikit-build.cmake.define]
SERENITY_USAGE_FROM_SOURCE = false
HDF5_ROOT="/usr/local/h5"
BUILD_SHARED_LIBS = true
MKL_ROOT = "/opt/intel/oneapi/mkl/2025.0"

[tool.cibuildwheel]
build-verbosity = 1
# 3.7 is the minimum python version supported by scikit-build-core
# build = ["cp37-*", "cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*", "cp313-*"]
build = ["cp312-*"]
manylinux-x86_64-image = "manylinux_2_28"

[tool.cibuildwheel.linux]
before-all = """
  git clone https://gitlab.com/libeigen/eigen.git
  cd eigen && git checkout 3.4.0 && cmake -S . -B build && cmake --build build --target install && cd ..
  tee > /tmp/oneAPI.repo << EOF
[oneAPI]
name=IntelÂ® oneAPI repository
baseurl=https://yum.repos.intel.com/oneapi
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
EOF
  mv /tmp/oneAPI.repo /etc/yum.repos.d
  yum install -y intel-oneapi-mkl-devel-2025.0.1
"""
archs = ["x86_64"]
# set LD_LIBRARY_PATH for serenity, xcfun and hdf5
repair-wheel-command = """
ls serenity-wheel/build/lib
echo $SERENITY_USAGE_FROM_SOURCE
export LD_LIBRARY_PATH=/usr/local/lib64:/project/serenity-wheel/lib64:/usr/local/h5/lib:/project/lib:/project/serenity-wheel/build/lib:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/opt/intel/oneapi/mkl/2025.0/lib/intel64:$LD_LIBRARY_PATH
auditwheel repair -w {dest_dir} {wheel}
"""
# only build CPython and not PyPy
skip = ["*-musllinux_x86_64", "pp*"]